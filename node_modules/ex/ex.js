/*!
 * @Note: This is just an practice test exercise, and does not come with any warranty or gaurnatee whatsoever
 * from the author
 * @author: Hitesh Ubharani
 * @credit: Originally developed by the money.js, modified by me
 */
/* money.js 0.1.3, MIT license, josscrowcroft.github.com/money.js */
var util = require('myutil');
if (typeof window != 'undefined' && typeof window.exSetup != 'undefined') {
    exSetup = window.exSetup;
} else if (typeof global != 'undefined' && typeof global.exSetup != 'undefined') {
    exSetup = global.exSetup;
} else {
    exSetup = {
        from: "USD",
        to: "INR"
    };
}

util.refreshRate();


(function(root, undefined) {

    var ex = function(obj) {
        return new exWrapper(obj);
    };

    function initializeRates() {
        exSetup.base = util.exSetup.base;
        exSetup.rates = util.exSetup.rates;

        console.log("ex.js exSetup: " + JSON.stringify(exSetup));
        ex.rates = exSetup.rates;
        ex.base = exSetup.base;

        // Default from / to currencies for conversion via ex.convert():
        ex.settings = {
            from: exSetup.to || ex.base,
            to: exSetup.from || ex.base
        };

    }


    initializeRates();


    var convert = ex.convert = function(val, opts) {
        console.log("val: " + val + "opts: " + opts.from + opts.to);
        // Make sure we gots some opts
        opts = opts || {};

        // We need to know the `from` and `to` currencies
        if (!opts.from) opts.from = ex.settings.from;
        if (!opts.to) opts.to = ex.settings.to;
        return val * getRate(opts.to, opts.from);
    };

    // Returns the exchange rate to `target` currency from `base` currency
    var getRate = function(to, from) {
        // Save bytes in minified version
        if (typeof ex.base === 'undefined' || typeof ex.rates === 'undefined') {
            initializeRates();
        }
        var rates = ex.rates;
        console.log("rates:" + ex.rates);
        // Make sure the base rate is in the rates object:
        rates[ex.base] = 1;

        // Throw an error if either rate isn't in the rates array
        if (!rates[to] || !rates[from]) throw "ex error";

        // If `from` currency === ex.base, return the basic exchange rate for the `to` currency
        if (from === ex.base) {
            return rates[to];
        }

        // If `to` currency === ex.base, return the basic inverse rate of the `from` currency
        if (to === ex.base) {
            return 1 / rates[from];
        }

        // Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the
        // relative exchange rate between the two currencies
        return rates[to] * (1 / rates[from]);
    };


    /* --- OOP wrapper and chaining --- */

    // If ex(val) is called as a function, it returns a wrapped object that can be used OO-style
    var exWrapper = function(val) {
        // Experimental: parse strings to pull out currency code and value:
        if (typeof val === "string") {
            this._v = parseFloat(val.replace(/[^0-9-.]/g, ""));
            this._ex = val.replace(/([^A-Za-z])/g, "");
        } else {
            this._v = val;
        }
    };

    // Expose `wrapper.prototype` as `ex.prototype`
    var exProto = ex.prototype = exWrapper.prototype;

    // ex(val).convert(opts) does the same thing as ex.convert(val, opts)
    exProto.convert = function() {
        var args = Array.prototype.slice.call(arguments);
        args.unshift(this._v);
        return convert.apply(ex, args);
    };

    // ex(val).from(currency) returns a wrapped `ex` where the value has been converted from
    // `currency` to the `ex.base` currency. Should be followed by `.to(otherCurrency)`
    exProto.from = function(currency) {
        var wrapped = ex(convert(this._v, {
            from: currency,
            to: ex.base
        }));
        wrapped._ex = ex.base;
        return wrapped;
    };

    // ex(val).to(currency) returns the value, converted from `ex.base` to `currency`
    exProto.to = function(currency) {
        return convert(this._v, {
            from: this._ex ? this._ex : ex.settings.from,
            to: currency
        });
    };


    /* --- Module Definition --- */

    // Export the ex object for CommonJS. If being loaded as an AMD module, define it as such.
    // Otherwise, just add `ex` to the global object
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = ex;
        }
        exports.ex = ex;
    } else if (typeof define === 'function' && define.amd) {
        // Return the library as an AMD module:
        define([], function() {
            return ex;
        });
    } else {
        // Use ex.noConflict to restore `ex` back to its original value before money.js loaded.
        // Returns a reference to the library's `ex` object; e.g. `var money = ex.noConflict();`
        ex.noConflict = (function(previousex) {
            return function() {
                // Reset the value of the root's `ex` variable:
                root.ex = previousex;
                // Delete the noConflict function:
                ex.noConflict = undefined;
                // Return reference to the library to re-assign it:
                return ex;
            };
        })(root.ex);

        // Declare `ex` on the root (global/window) object:
        root['ex'] = ex;
    }

    // Root will be `window` in browser or `global` on the server:
}(this));